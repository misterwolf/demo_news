c
params
c
news
c
current_user
ccurrent_user
c
cv
@single_news.save
@single_news
c
params
c
news_params
@single_news
c
params.require(:params)
params.require(:news)
params
c
params
c
controller
current_user
c
x
c
sorting[0]
sorting
c
page.all('.news-item h2').collect(&:text)
c
page.all(:css, '.news-item h1').collect(&:text)
c
page.all(:css, '.news-item').collect(&:text)
page.all('.news-item h1').collect(&:text)
ùpage.all('.news-item h1').collect(&:text)
c
page.all('.news-item h1').collect(&:text)
page.body.all('.news-item h1').collect(&:text)
c
page.all(:css, '.news-item h1').collect(&:text)
page.all('.news-item h1').collect(&:text)
page.all(:css, '.news-item').collect(&:text)
page.all(:css, '.news-item').collect(&:div)
page.all(:css, '.news-item')
page.all(:css, '.news-item').collect(&:h2)
page.all('.news-item').collect(&:h2)
page..all('.news-item').collect(&:h2)
page..all('.news-item').collect(&:text)
page.all('.news-item')
page.body.all('.news-item')
c
search
@news
@news.any?
c
filter_on_author_content_title(value)
value
c
search
c
News.search(search)
c
News.all
News.allNews.all
c
News.all
c
 News.all
c
x
c
News.filter_by_author(search, sort).to_a.second.author
News.filter_by_author(search, sort).to_a.first.author
News.filter_by_author(search, sort).to_a.first.user
News.filter_by_author(search, sort).to_a
News.filter_by_author(search, sort).to_a.users
News.filter_by_author(search, sort).to_as.users
News.filter_by_author(search, sort)
params
c
params
search
News.filter_by_author(search, sort)
c
News.all
c
News.all
c
News.all
c
News.all
News.allù
c
News.all
news2
c
 News.all
c
 News.all
c
 News.all
next
c
search
News.filter_on_author_content_title(search)
search.present?
params
search
c
create(:user)
c
create(:user)
c
create(:user)
c
create(:user)
create(:user, name: 'test-name', lastname: 'test-lastname')
c
next
c
news.filter_by_content(search)
searched
next
c
exception
next
c
 news = news.filter_by_title(search)
news = News.where(nil)
News.where(nil)
news
next
c
news.filter_by_title(search)
news.size
next
news.size
news
next
c
news.filter_by_author(search)
next
c
news.includes(:author).filter_by_author(search)
news.filter_by_author(search)
news
next
c
news.filter_by_author(search)
news = News.includes(:author).where(nil)
c
news.filter_by_author(search)
news = News.includes(:author).where(nil)
c
News.includes(:author).where('users.name like ?', "%#{search}%")
News.include(:author).where('users.name like ?', "%#{search}%")
News.includes(:author).where('users.name like ?', "%#{search}%")
News.includes(:author).all.where('users.name like ?', "%#{search}%")
News.includes(:author).all
c
News.includes(:author).where('title LIKE ? or content like ? or users.name like ?', search, search, search).references(:author)
c
News.includes(:author).where('title LIKE ? or content like ? or authors.name like ?', search, search, search).references(:author)
News.includes(:author).all.where('title LIKE ? or content like ? or authors.name like ?', search, search, search).references(:author)
News.includes(:author).all.where('title LIKE ? or content like ? or authors.name like ?', search, search, search)
News.includes(:author).where('title LIKE ? or content like ? or authors.name like ?', search, search, search)
News.includes(:author)
c
News.includes(:author).where('title LIKE ? or content like ? or authors.name like ?', search, search, search)
c
News.includes(:author)c
News.includes(:author)
News.includes(:users)
News.includes(:user)
News.includes(:authors)
c
News.includes(:authors).where('title LIKE ? or content like ? or authors.name like ?', search, search, search)
News.includes(:authors).where('title LIKE ? or content like ? or authors.name like ?', search, search)
next
c
News.all.includes(:author).where('title LIKE ? or content like ?', search)
News.all.include(:author).where('title LIKE ? or content like ?', search)
News.include(:author).where('title LIKE ? or content like ?', search)
News.include(::Author).where('title LIKE ? or content like ?', search)
News.include(Author).where('title LIKE ? or content like ?', search)
News.include(:author).where('title LIKE ? or content like ?', search)
News.author.where('title LIKE ? or content like ?', search)
News.author.where('title LIKE ? or content like ? or author.full_name like ?', search)
News.author.where('title LIKE ? or content like ? or author like ?', search)
next
cnext
c
News.where(title: search, content: search, author: search)
params
c
params
c
params
params[:search]
c
